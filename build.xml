<?xml version="1.0"?>
<project name="Hadoop-Snappy-Compression" default="compile">
  <property name="Name" value="Hadoop Snappy Compression"/>
  <property name="name" value="hadoop_snappy"/>
  <property name="version" value="0.0.1"/>
  <property name="final.name" value="${name}-${version}"/>
  
  <property name="src.dir" value="${basedir}/src"/>
  <property name="java.src.dir" value="${src.dir}/java"/>
  <property name="native.src.dir" value="${basedir}/src/native"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="test.lib.dir" value="${lib.dir}"/>
  
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.src" value="${build.dir}/src"/>
  <!-- convert spaces to _ so that mac os doesn't break things -->
  <exec executable="sed" inputstring="${os.name}"
        outputproperty="nonspace.os">
    <arg value="s/ /_/g"/>
  </exec>
  <property name="build.platform"
            value="${nonspace.os}-${os.arch}-${sun.arch.data.model}"/>
  <property name="jvm.arch"
            value="${sun.arch.data.model}"/>
  <property name="build.native" value="${build.dir}/native/${build.platform}"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.javadoc" value="${build.docs}/api"/>
  <property name="build.javadoc.dev" value="${build.docs}/dev-api"/>
  <property name="build.encoding" value="ISO-8859-1"/>

  <property name="test.src.dir" value="${basedir}/src/test"/>
  <property name="test.build.dir" value="${build.dir}/test"/>
  <property name="test.input.data" value="${test.src.dir}/data"/>
  <property name="test.generated.dir" value="${test.build.dir}/src"/>
  <property name="test.build.data" value="${test.build.dir}/data"/>
  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.build.classes" value="${test.build.dir}/classes"/>
  
  <property name="test.include" value="Test*"/>
  <property name="test.classpath.id" value="test.classpath"/>
  <property name="test.output" value="no"/>
  <property name="test.timeout" value="900000"/>
  <property name="test.junit.output.format" value="plain"/>
  <property name="test.junit.fork.mode" value="perTest" />
  <property name="test.junit.printsummary" value="yes" />
  <property name="test.junit.haltonfailure" value="no" />
  <property name="test.junit.maxmemory" value="512m" />

  <property name="javadoc.link.java"
            value="http://java.sun.com/javase/6/docs/api/"/>
  <property name="javadoc.packages" value="com.hadoop.compression.*"/>
  
  <property name="dist.dir" value="${build.dir}/${final.name}"/>
  
  <property name="javac.debug" value="on"/>
  <property name="javac.optimize" value="on"/>
  <property name="javac.deprecation" value="on"/>
  <property name="javac.version" value="1.6"/>
  <property name="javac.args" value=""/>
  <property name="javac.args.warnings" value="-Xlint:unchecked"/>
  
  <property name="make.cmd" value="make"/>

  <!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
    <pathelement location="${conf.dir}"/>
  </path>
  
  <!-- the unit test classpath: uses test.src.dir for configuration -->
  <path id="test.classpath">
    <pathelement location="${test.build.extraconf}"/>
    <pathelement location="${test.build.classes}" />
    <pathelement location="${test.src.dir}"/>
    <pathelement location="${build.dir}"/>
    <pathelement location="${build.examples}"/>
    <pathelement location="${build.tools}"/>
    <fileset dir="${test.lib.dir}">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
    <path refid="classpath"/>
  </path>
  
  <!-- the cluster test classpath: uses conf.dir for configuration -->
  <path id="test.cluster.classpath">
    <path refid="classpath"/>
    <pathelement location="${test.build.classes}" />
    <pathelement location="${test.src.dir}"/>
    <pathelement location="${build.dir}"/>
  </path>
  
  <!-- ====================================================== -->
  <!-- Init                                                   -->
  <!-- ====================================================== -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.src}"/>
    
    <mkdir dir="${test.build.dir}"/>
    <mkdir dir="${test.build.classes}"/>
  </target>

  <!-- ====================================================== -->
  <!-- Compile                                -->
  <!-- ====================================================== -->
  <target name="compile-java" depends="init">
    <javac
       encoding="${build.encoding}"
       srcdir="${java.src.dir}"
       includes="**/*.java"
       destdir="${build.classes}"
       debug="${javac.debug}"
       optimize="${javac.optimize}"
       target="${javac.version}"
       source="${javac.version}"
       deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="classpath"/>
    </javac>    
  </target>
  
  <target name="check-native-uptodate">
    <uptodate
       property="native.uptodate"
       targetfile="${build.native}/lib/libhadoopsnappy.so">
      <srcfiles dir="${native.src.dir}" includes="**/*" />
    </uptodate>
  </target>
  
  <target name="compile-native" depends="compile-java,check-native-uptodate" unless="native.uptodate">
    
    <mkdir dir="${build.native}/lib"/>
    <mkdir dir="${build.native}/src/org/apache/hadoop/io/compress/snappy"/>

    <property name="snappy.lib" value=""/>
    
    <exec dir="${build.native}" executable="sh" failonerror="true">
      <env key="OS_NAME" value="${os.name}"/>
      <env key="OS_ARCH" value="${os.arch}"/>
      <env key="JVM_DATA_MODEL" value="${sun.arch.data.model}"/>
      <env key="NATIVE_SRCDIR" value="${native.src.dir}"/>
      <arg line="${native.src.dir}/configure CPPFLAGS=-I${snappy.lib}/usr/local/include LDFLAGS=-L${snappy.lib}/usr/local/lib"/>
    </exec>
    
    <exec dir="${build.native}" executable="${make.cmd}" failonerror="true">
      <env key="OS_NAME" value="${os.name}"/>
      <env key="OS_ARCH" value="${os.arch}"/>
      <env key="JVM_DATA_MODEL" value="${sun.arch.data.model}"/>
      <env key="HADOOP_NATIVE_SRCDIR" value="${native.src.dir}"/>
    </exec>
    
    <exec dir="${build.native}" executable="sh" failonerror="true">
      <arg line="${build.native}/libtool --mode=install cp ${build.native}/libhadoopsnappy.la ${build.native}/lib"/>
    </exec>
  </target>
  
  <target name="compile" depends="compile-java,compile-native"
          description="Compile all">
  </target>
  
  <!-- ================================================================== -->
  <!-- Jar                                                                -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile-java" description="Make jar">
    <jar jarfile="${build.dir}/${final.name}.jar"
         basedir="${build.classes}">
      <manifest>
        <section name="org/apache/hadoop/io/compress">
          <attribute name="Implementation-Title"
                     value="Hadoop Snappy Compression"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value=""/>
        </section>
      </manifest>
    </jar>
  </target>
  <!-- ================================================================== -->
  <!-- Test                                                               -->
  <!-- ================================================================== -->
  <target name="compile-java-test" depends="compile">
    <javac
       encoding="${build.encoding}"
       srcdir="${test.src.dir}"
       includes="org/apache/hadoop/**/*.java"
       destdir="${test.build.classes}"
       debug="${javac.debug}"
       optimize="${javac.optimize}"
       target="${javac.version}"
       source="${javac.version}"
       deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="test.classpath"/>
    </javac>
  </target>
  
  <!-- ================================================================== -->
  <!-- Run test                                                           -->
  <!-- ================================================================== -->
  <target name="test" depends="compile-java-test"
          description="Run test">
    
    <delete dir="${test.build.data}"/>
    <mkdir dir="${test.build.data}"/>
    <copy todir="${test.build.data}">
      <fileset dir="${test.input.data}"/>
    </copy>
    <delete dir="${test.log.dir}"/>
    <mkdir dir="${test.log.dir}"/>
    <junit showoutput="${test.output}"
           printsummary="${test.junit.printsummary}"
           haltonfailure="${test.junit.haltonfailure}"
           fork="yes"
           forkmode="${test.junit.fork.mode}"
           maxmemory="${test.junit.maxmemory}"
           dir="${basedir}" timeout="${test.timeout}"
           errorProperty="tests.failed" failureProperty="tests.failed">
      <sysproperty key="test.build.data" value="${test.build.data}"/>
      <sysproperty key="test.cache.data" value="${test.cache.data}"/>
      <sysproperty key="test.debug.data" value="${test.debug.data}"/>
      <sysproperty key="hadoop.log.dir" value="${test.log.dir}"/>
      <sysproperty key="test.src.dir" value="${test.src.dir}"/>
      <sysproperty key="test.build.extraconf" value="${test.build.extraconf}" />
      <sysproperty key="hadoop.policy.file" value="hadoop-policy.xml"/>
      <sysproperty key="java.library.path"
                   value="${build.native}/lib:${lib.dir}/native/${build.platform}:/usr/lib:/usr/local/lib"/>
      <sysproperty key="install.c++.examples" value="${install.c++.examples}"/>
      <!-- set compile.c++ in the child jvm only if it is set -->
      <syspropertyset dynamic="no">
        <propertyref name="compile.c++"/>
      </syspropertyset>
      <classpath refid="${test.classpath.id}"/>
      <formatter type="${test.junit.output.format}" />
      <batchtest todir="${test.build.dir}" unless="testcase">
        <fileset dir="${test.src.dir}"
                 includes="**/${test.include}.java"
                 excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${test.build.dir}" if="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>
  
  <!-- ================================================================== -->
  <!-- Package                                                            -->
  <!-- ================================================================== -->
  <target name="package" depends="compile, jar"
          description="Package">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    
    <copy todir="${dist.dir}/lib" includeEmptyDirs="false">
      <fileset dir="lib">
        <exclude name="**/native/**"/>
        <exclude name="*hadoop*.jar"/>
      </fileset>
    </copy>
    
    <copy todir="${dist.dir}">
      <fileset file="${build.dir}/${final.name}*.jar"/>
    </copy>
    
    <exec dir="${dist.dir}" executable="sh" failonerror="true">
      <env key="BASE_NATIVE_LIB_DIR" value="${lib.dir}/native"/>
      <env key="BUILD_NATIVE_DIR" value="${build.dir}/native"/>
      <env key="DIST_LIB_DIR" value="${dist.dir}/lib/native"/>
      <arg line="${native.src.dir}/packageNativeHadoop.sh"/>
    </exec>
    
    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="*.txt" />
      </fileset>
    </copy>
    
    <copy todir="${dist.dir}/" file="build.xml"/>
  </target>
  
  <!-- ================================================================== -->
  <!-- Make tar                                                           -->
  <!-- ================================================================== -->
  <macrodef name="macro_tar" description="Worker Macro for tar">
    <attribute name="param.destfile"/>
    <element name="param.listofitems"/>
    <sequential>
      <tar compression="gzip" longfile="gnu"
           destfile="@{param.destfile}">
        <param.listofitems/>
      </tar>
    </sequential>
  </macrodef>
  
  <target name="tar" depends="package" description="Make release tarball">
    <macro_tar param.destfile="${build.dir}/${final.name}.tar.gz">
      <param.listofitems>
        <tarfileset dir="${build.dir}" mode="664">
          <exclude name="${final.name}/bin/*" />
          <include name="${final.name}/**" />
        </tarfileset>
        <tarfileset dir="${build.dir}" mode="755">
          <include name="${final.name}/bin/*" />
        </tarfileset>
      </param.listofitems>
    </macro_tar>
  </target>

  <!-- ================================================================== -->
  <!-- Package/Tar Full (including Snappy native library)                 -->
  <!-- ================================================================== -->

   <target name="package-full" depends="package">
    <copy todir="${build.native}/lib">
      <fileset dir="${snappy.lib}/usr/local/lib">
        <include name="libsnappy.so*"/>
        <include name="libsnappy.la"/>
        <include name="libsnappy.a"/>
      </fileset>
    </copy>
  </target>

  <target name="tar-full" depends="package-full">
    <antcall target="tar"/>
  </target>
  
  <!-- ================================================================== -->
  <!-- Clean                                                              -->
  <!-- ================================================================== -->
  <target name="clean"
          description="Clean.">
    <delete dir="${build.dir}"/>
  </target>
</project>
